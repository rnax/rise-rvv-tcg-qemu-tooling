#------------------------------------------------------------------------------
# SPEC CPU(R) 2017 config for gcc/g++/gfortran on 64-bit RISC-V QEMU User Mode
# emulation
#------------------------------------------------------------------------------
#
# Contributor: Jeremy Bennett <jeremy.bennett@embecosm.com>
#
# Based on Example-gcc-linux-x86.cfg
#
# The author tested this config file with:
#    Compiler version(s):    GCC 12.1
#    Operating system(s):    QEMU for RISCV-64 version 8.0.50
#    Hardware:               Intel(R) Xeon(R) CPU E5-2630 v4 @ 2.20GHz
#
# Note: This is not intended for use on GCC versions older than GCC 10.
#
# For SPEC help:   https://www.spec.org/cpu2017/Docs/techsupport.html
#------------------------------------------------------------------------------


#---------  Default user defined symbols   ------------------------------------
# Symbols can be overridden on the command line with
#
#    runcpu --define <symbol>=<value
default:

# Arbitrary string to tag binaries (no spaces allowed).  Will be prefixed by
# "riscv64-qemu-"
%ifndef %{label}
%   define label "default"
%endif
%if %{label} =~ m/ /
%   error Your label "%{label}" contains spaces.  Please try underscores instead.
%endif
%if %{label} !~ m/^[a-zA-Z0-9._-]+$/
%   error Illegal character in label "%{label}".  Please use only alphanumerics, underscore, hyphen, and period.
%endif

# Parallelism. A good value is the number of hyperthreads in your system.
%ifndef %{build_ncpus}
%   define  build_ncpus 40
%endif

%ifndef %{model}
%   define model        -march=rv64gc_zba_zbb_zbs -mabi=lp64d
%endif

%ifndef %{qemu64_flags}
%   define qemu64_flags zicsr=true,v=true,vext_spec=v1.0,zfh=true,zvfh=true
%endif

%ifndef %{spec_flags}
%   define spec_flags  -Ofast -flto=auto
%endif

%ifndef %{static_flags}
%   error static_flags not defined
%   define static_flags
%endif

%ifndef %{cc_compiler}
%   define cc_compiler gcc
%endif

%ifndef %{cxx_compiler}
%   define cxx_compiler g++
%endif

%ifndef %{fc_compiler}
%   define fc_compiler gfortran
%endif

#---------  Global Settings  ----------------------------------------------
# For info, see:
#            https://www.spec.org/cpu2017/Docs/config.html#fieldname
#   Example: https://www.spec.org/cpu2017/Docs/config.html#tune

default:

# The following are common with Rivos  Note in particular that we prefer speed
# over rate tests.  The default set from Rivos is SPECrate, but is overridden
# from the command line.
command_add_redirect    = 1
ignore_errors           = 1
iterations              = 1
line_width              = 1020
log_line_width          = 1020
mean_anyway             = 1
preenv                  = 1
reportable              = 0
strict_rundir_verify    = ${strict_verify}
tune                    = base
runlist                 = 500.perlbench_r,502.gcc_r,505.mcf_r,520.omnetpp_r,523.xalancbmk_r,525.x264_r,531.deepsjeng_r,541.leela_r,548.exchange2_r,557.xz_r,999.specrand_ir,503.bwaves_r,507.cactuBSSN_r,508.namd_r,510.parest_r,511.povray_r,519.lbm_r,521.wrf_r,526.blender_r,527.cam4_r,538.imagick_r,544.nab_r,549.fotonik3d_r,554.roms_r,997.specrand_fr

# The following are in Rivos, but with different values.
label                   = riscv64-qemu-%{label}
makeflags               = --jobs=%{build_ncpus}
output_format           = txt,html,cfg,pdf,csv

# How to run under QEMU - to be used for speed as well as rate tests
%ifdef %{use_submit}
submit = qemu-riscv64 -cpu rv64,%{qemu64_flags} -- ${command}
use_submit_for_speed    = 1
use_submit_for_compare  = 1
%endif

#---------  How Many CPUs?  ---------------------------------------------------
# Both SPECrate and SPECspeed can test multiple chips / cores / hw threads
#    - For SPECrate,  you set the number of copies.
#    - For SPECspeed, you set the number of threads.
# See: https://www.spec.org/cpu2017/Docs/system-requirements.html#MultipleCPUs
#
# For QEMU, it's not clear that multiple copies or threads helps at all.

intrate,fprate:
   copies           = 1   # EDIT to change number of copies (see above)

intspeed,fpspeed:
   threads          = 1   # EDIT to change number of OpenMP threads (see above)


#-------  Compilers  ----------------------------------------------------------
default:

#  EDIT: The parent install directory for your compiler tool chain
#        Do not include the trailing /bin/
#        Do not include a trailing slash

# There is no point in hard coding this, so warn if it's mssing.  It should be
# set from the command line:
#
#    runcpu --define gcc_dir=<absdirname> ... \

%ifndef %{gcc_dir}
%   error Please define the GCC installation directory - see instructions in config file
%endif

# We also need to know the location of the QEMU plugin directory to access the
# instruction counting builtin.  There is no point in hard coding this, so
# warn if it's mssing.  It should be set from the command line:
#
#    runcpu --define qemu_plugin_dir=<absdirname> ... \
#%ifndef %{qemu_plugin_dir}
#%   error Please define QEMU plugin directory - see instructions in config file
#%endif

   SPECLANG   = %{gcc_dir}/bin/
   CC         = $(SPECLANG)riscv64-unknown-linux-gnu-%{cc_compiler}  %{static_flags} -std=gnu99 %{model}
   CXX        = $(SPECLANG)riscv64-unknown-linux-gnu-%{cxx_compiler} %{static_flags} -std=c++03 %{model}
   FC         = $(SPECLANG)riscv64-unknown-linux-gnu-%{fc_compiler}  %{static_flags}        %{model}

   # How to say "Show me your version, please"
   CC_VERSION_OPTION  = --version
   CXX_VERSION_OPTION = --version
   FC_VERSION_OPTION  = --version

default:
   sw_base_ptrsize = 64-bit
   sw_peak_ptrsize = 64-bit

#--------- Portability ----------------------------------------------------
default:               # data model applies to all benchmarks
    EXTRA_PORTABILITY = -DSPEC_LP64

# Benchmark-specific portability (ordered by last 2 digits of bmark number)

500.perlbench_r,600.perlbench_s:  #lang='C'
   PORTABILITY   = -DSPEC_LINUX_AARCH64

521.wrf_r,621.wrf_s:  #lang='F,C'
   CPORTABILITY  = -DSPEC_CASE_FLAG
   FPORTABILITY  = -fconvert=big-endian

523.xalancbmk_r,623.xalancbmk_s:  #lang='CXX'
   PORTABILITY   = -DSPEC_LINUX

526.blender_r:  #lang='CXX,C'
   PORTABILITY   = -funsigned-char -DSPEC_LINUX

527.cam4_r,627.cam4_s:  #lang='F,C'
   PORTABILITY   = -DSPEC_CASE_FLAG -Wno-implicit-int

628.pop2_s:  #lang='F,C'
   CPORTABILITY  = -DSPEC_CASE_FLAG
   FPORTABILITY  = -fconvert=big-endian

#----------------------------------------------------------------------
#       GCC workarounds that do not count as PORTABILITY
#----------------------------------------------------------------------
# The workarounds in this section would not qualify under the SPEC CPU
# PORTABILITY rule.
#   - In peak, they can be set as needed for individual benchmarks.
#   - In base, individual settings are not allowed; set for whole suite.
# See:
#     https://www.spec.org/cpu2017/Docs/runrules.html#portability
#     https://www.spec.org/cpu2017/Docs/runrules.html#BaseFlags
#
# Integer workarounds - peak
#

500.perlbench_r,600.perlbench_s:
   EXTRA_CFLAGS = -fno-finite-math-only -fno-unsafe-math-optimizations
500.perlbench_r,600.perlbench_s=peak:    # https://www.spec.org/cpu2017/Docs/benchmarks/500.perlbench_r.html
   EXTRA_CFLAGS = -fno-strict-aliasing -fno-unsafe-math-optimizations -fno-finite-math-only
502.gcc_r,602.gcc_s=peak:                # https://www.spec.org/cpu2017/Docs/benchmarks/502.gcc_r.html
   EXTRA_CFLAGS = -fno-strict-aliasing -fgnu89-inline
505.mcf_r,605.mcf_s=peak:                # https://www.spec.org/cpu2017/Docs/benchmarks/505.mcf_r.html
   EXTRA_CFLAGS = -fno-strict-aliasing
525.x264_r,625.x264_s=peak:              # https://www.spec.org/cpu2017/Docs/benchmarks/525.x264_r.html
  EXTRA_CFLAGS = -fcommon
#
# Integer workarounds - base - combine the above - https://www.spec.org/cpu2017/Docs/runrules.html#BaseFlags
#
intrate,intspeed=base:
   EXTRA_CFLAGS = -fno-strict-aliasing -fgnu89-inline -fcommon
#
# FP workarounds - base - combine the above - https://www.spec.org/cpu2017/Docs/runrules.html#BaseFlags
#
fprate,fpspeed=base:
   EXTRA_CFLAGS = -fno-strict-aliasing
   EXTRA_FFLAGS = -fallow-argument-mismatch -fmax-stack-var-size=65536

#
# Floating Point workarounds - peak
#
   511.povray_r=peak:                       # https://www.spec.org/cpu2017/Docs/benchmarks/511.povray_r.html
      EXTRA_CFLAGS = -fno-strict-aliasing
   521.wrf_r,621.wrf_s=peak:                # https://www.spec.org/cpu2017/Docs/benchmarks/521.wrf_r.html
      EXTRA_FFLAGS = -fallow-argument-mismatch # GCC 10 or later only
   527.cam4_r,627.cam4_s=peak:              # https://www.spec.org/cpu2017/Docs/benchmarks/527.cam4_r.html
      EXTRA_CFLAGS = -fno-strict-aliasing
      EXTRA_FFLAGS = -fallow-argument-mismatch  # GCC 10 or later only
   # See also topic "628.pop2_s basepeak" below
   628.pop2_s=peak:                         # https://www.spec.org/cpu2017/Docs/benchmarks/628.pop2_s.html
      EXTRA_FFLAGS = -fallow-argument-mismatch  # GCC 10 or later only

#-------- Tuning Flags common to Base and Peak --------------------------------
#
# Speed (OpenMP and Autopar allowed)
#
#intspeed,fpspeed:
#   EXTRA_OPTIMIZE = -fopenmp -DSPEC_OPENMP
fpspeed:
   #
   # 627.cam4 needs a big stack; the preENV will apply it to all
   # benchmarks in the set, as required by the rules.
   #
   preENV_OMP_STACKSIZE = 120M

#--------  Base Tuning Flags ----------------------------------------------
# EDIT if needed -- If you run into errors, you may need to adjust the
#                   optimization - for example you may need to remove
#                   the -march=native.   See topic "Older GCC" above.
#
default=base:     # flags for all base
   OPTIMIZE = -g %{spec_flags}

#--------  Peak Tuning Flags ----------------------------------------------
default=peak:
   OPTIMIZE    = -g %{spec_flags}
   PASS1_FLAGS = -fprofile-generate
   PASS2_FLAGS = -fprofile-use

# 628.pop2_s basepeak: Depending on the interplay of several optimizations,
#            628.pop2_s might not validate with peak tuning.  Use the base
#            version instead.  See:
#            https:// www.spec.org/cpu2017/Docs/benchmarks/628.pop2_s.html
628.pop2_s=peak:
   basepeak         = yes
